* Hyper Substrates

Visualizing 'ensemble' (Braitenberg, Schütz, Palm, Pulvermüller, Yuste, Buzsáki, Von Der Malsburg, etc.) neuronal nets.
This is one of several rewrites and will not be the last.
(An earlier installement: [[https://vehicles.faster-than-light-memes.xyz/art/p/assembly-friends/4][assembly-friends]], runs in the browser).

My current line of thinking is to make something 'biological' (substrate-like), and put it together
with a hyper dimensional computing - and associative memory - framework. ([[https://faster-than-light-memes.xyz/high-dimensional-computing-with-sparse-vectors.html][Current stuff]]).

The point of this is to explore how to bring in randomness (variation), selection ([[https://en.wikipedia.org/wiki/Neural_Darwinism][Neural Darwinism]]), conjecture and critism (David Deutsch)
and meme-like (Dennett), self-growing (Turing, Levin), self-stabilizing (dare I mention autopoetic) software elements.
(Such randomness is discussed in Mitchell and Hofstadter [[https://en.wikipedia.org/wiki/Copycat_(software)][1988]]).

Since I am a visual person and I want to /feel/ what I program, I build this stuff here, to see what it does.

This is a kind of a-life excerice. And a hammock driven delopment thing.

* Brownian Local Explorer Resonator Particle - Blerp

When I close my eyes I am not blind. There is a shimmering there. Vaguely colorful blobs swirling. Perhaps manifesting
into the hints of edges, then ebbing and flowing, washed away by some force of nature which they are not able to whithstand.
Perhaps no more than the ideas of an idea of an object.


- =particle-field= is a directed graph (on a 2d grid).
- Each node is connected to itself and it's immediate neighbours (local).
- Time is discrete, at each time step =A= (activation) particles are selected (global inhibition model).
- This makes /ensembles/.
- They are in some ways a little bit like the gliders of this physics system.
- With =adaptation= (=attenuation=): Each node has a lower chance to fire when it is active
  (making it move like an ameaba).
- =vacum-babble=: Random elements fire (also intrinsic firing rate).
- =decay=: Random elements are erased (neuron failure rate).
- This gives ensembles a /half-time/.
- Activity must survive this decay assault, it must /regenerate/. (or die).
- the resonator part is the idea that top-down processes constrain which nodes are especially excitable for the blerp.
  (how to do this is to be figured out).

#+CAPTION: Just some blerps coming from a locally connected graph and some randomness
https://drive.google.com/file/d/1FzKIxnld6xk2b6WQIYcqZCyWtWSR4ii8/view?usp=sharing
(does drive link work? Not sure).

[more soon]

* Brain Constraint?

This depends on ones sense of aesthetic.

Global inhibition and recurrent connections create neuronal ensembles.
And the neuronal ensembles make sense to me as a mesoscale brain software element.

[[https://youtu.be/MIkyfEWAflY?si=89oe5Te35pHelEBz][LLM Understanding: 2. F. PULVERMUELLER "Semantic grounding in brain-constrained neural networks"]].


- emphasis on internally generated dynamics (Buzsáki)
- weights with log normal distribution (Buzsáki)

- classically, the recurrent neuronal nets
  (coming now in deep learning and cognitive modeling again as modern Hopfield nets)
  use local plasticity (for instance Hebbian Learning).
- I don't need plasticity for the blerps at the moment

- There are other topics like spike rates,
  timings ([[https://pubmed.ncbi.nlm.nih.gov/29863378/][The emergence of polychronization and feature binding in a spiking neural network model of the primate ventral visual system]]),
  synchronicity (e.g. Earl Miller) or computation at the dendrites.


* Substrate-like?

- constrain the software to be biologically principled.

There are elements following local rules, which must self-organise, grow and regenerate.

Because we try to build software out of elements that must self organise, you get something
that must be robust. It must deal with being unreliable and not-there anyway, because it must
build itself in the first place.

I'm fine with trying to explore substrate-like elements embedded in a conventional software architecture.
Using the power of computing that we already made available to ourselfes with software and programing languages,
and tyring to build in some self-growing, self-exploring 'subroutines'.

I.e. Something like blerps at the bottom, but perhaps just Lisp on mesoscale and macroscale levels.

Inspirations:

- [[https://youtu.be/7hwO8Q_TyCA?si=OFF73KkKeWt9TQQt][Dave Ackley Robust First]]
- [[https://en.wikipedia.org/wiki/Turing_pattern][Turing patterns]]
  (Perhaps substrate-like computing is a continuation of Turings project).
- [[https://youtu.be/S7582jc5Hnk?si=h-6YArnxwqPi_dPH][chemical computing]]


* Toys, Music, Memes, Software Animals

The /neuronal memetics hypothesis/ one might say is that brain software is made from harmonic, agental (competent without comprehension) software animals.

I expect brain software to be something like 'software that works more like music'.
(Already the case on the system level: https://youtu.be/O4FCu1NqdYo?si=uZJP60ScDa9C-Uju).

I think memetics and neuronal darwnism is not utilized they way it could in systems neuroscience and neurophilosophy.
(https://faster-than-light-memes.xyz/benjamin-overview.html).

The difference of toys and technology is nominal. I think that toys, games, user interfaces, computation and technology ultimately are on continua somewhere,
but the same underlying theory will describe them.

I am a fan of pixars /Inside Out/ (1+2), I love the cognitive system as a colorful computer system.
This colorful information processsing system the flair that I want my software art explorations to have.

Art diary: https://faster-than-light-memes.xyz/art-diary.html

Next, I would like to play around with giving a Braitenberg Vehicle memories in the form of hyperdimensional associative data structures.

* Run

- have some kind of python env

#+begin_src
pip install torch numpy
#+end_src

I do this with

#+begin_src
  python -m venv venv
  . activate.sh
  pip install torch numpy
#+end_src

Then, I use run.sh via dev.el.

With the repl running, you eval a file like file:src/animismic/g.clj.

If you have cuda, this uses the gpu.

* Lit

Buzsáki, G. (2019). The Brain From Inside Out. New York: Oxford University.

FRIEDEMANN PULVERMÜLLER
https://www.sciencedirect.com/science/article/abs/pii/0149763495000682
